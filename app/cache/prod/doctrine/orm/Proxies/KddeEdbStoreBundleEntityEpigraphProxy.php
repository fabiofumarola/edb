<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class KddeEdbStoreBundleEntityEpigraphProxy extends \Kdde\EdbStoreBundle\Entity\Epigraph implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setEdb($edb)
    {
        $this->__load();
        return parent::setEdb($edb);
    }

    public function getEdb()
    {
        $this->__load();
        return parent::getEdb();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setLost($lost)
    {
        $this->__load();
        return parent::setLost($lost);
    }

    public function getLost()
    {
        $this->__load();
        return parent::getLost();
    }

    public function setAltMaxLetters($altMaxLetters)
    {
        $this->__load();
        return parent::setAltMaxLetters($altMaxLetters);
    }

    public function getAltMaxLetters()
    {
        $this->__load();
        return parent::getAltMaxLetters();
    }

    public function setAltMinLetters($altMinLetters)
    {
        $this->__load();
        return parent::setAltMinLetters($altMinLetters);
    }

    public function getAltMinLetters()
    {
        $this->__load();
        return parent::getAltMinLetters();
    }

    public function setReimpiegoOpistografia($reimpiegoOpistografia)
    {
        $this->__load();
        return parent::setReimpiegoOpistografia($reimpiegoOpistografia);
    }

    public function getReimpiegoOpistografia()
    {
        $this->__load();
        return parent::getReimpiegoOpistografia();
    }

    public function setTrascription($trascription)
    {
        $this->__load();
        return parent::setTrascription($trascription);
    }

    public function getTrascription()
    {
        $this->__load();
        return parent::getTrascription();
    }

    public function setDivergentText($divergentText)
    {
        $this->__load();
        return parent::setDivergentText($divergentText);
    }

    public function getDivergentText()
    {
        $this->__load();
        return parent::getDivergentText();
    }

    public function setCriticalApparatus($criticalApparatus)
    {
        $this->__load();
        return parent::setCriticalApparatus($criticalApparatus);
    }

    public function getCriticalApparatus()
    {
        $this->__load();
        return parent::getCriticalApparatus();
    }

    public function setMetricText($metricText)
    {
        $this->__load();
        return parent::setMetricText($metricText);
    }

    public function getMetricText()
    {
        $this->__load();
        return parent::getMetricText();
    }

    public function setGreek($greek)
    {
        $this->__load();
        return parent::setGreek($greek);
    }

    public function getGreek()
    {
        $this->__load();
        return parent::getGreek();
    }

    public function setPresenceLG($presenceLG)
    {
        $this->__load();
        return parent::setPresenceLG($presenceLG);
    }

    public function getPresenceLG()
    {
        $this->__load();
        return parent::getPresenceLG();
    }

    public function setComment($comment)
    {
        $this->__load();
        return parent::setComment($comment);
    }

    public function getComment()
    {
        $this->__load();
        return parent::getComment();
    }

    public function setDataScheda($dataScheda)
    {
        $this->__load();
        return parent::setDataScheda($dataScheda);
    }

    public function getDataScheda()
    {
        $this->__load();
        return parent::getDataScheda();
    }

    public function setAdAnnum($adAnnum)
    {
        $this->__load();
        return parent::setAdAnnum($adAnnum);
    }

    public function getAdAnnum()
    {
        $this->__load();
        return parent::getAdAnnum();
    }

    public function setPrincipalProgNumber($principalProgNumber)
    {
        $this->__load();
        return parent::setPrincipalProgNumber($principalProgNumber);
    }

    public function getPrincipalProgNumber()
    {
        $this->__load();
        return parent::getPrincipalProgNumber();
    }

    public function setSubNumeration($subNumeration)
    {
        $this->__load();
        return parent::setSubNumeration($subNumeration);
    }

    public function getSubNumeration()
    {
        $this->__load();
        return parent::getSubNumeration();
    }

    public function setIsActive($isActive)
    {
        $this->__load();
        return parent::setIsActive($isActive);
    }

    public function getIsActive()
    {
        $this->__load();
        return parent::getIsActive();
    }

    public function setCompilator(\Kdde\EdbStoreBundle\Entity\User $compilator)
    {
        $this->__load();
        return parent::setCompilator($compilator);
    }

    public function getCompilator()
    {
        $this->__load();
        return parent::getCompilator();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setIcvr(\Kdde\EdbStoreBundle\Entity\Icvr $icvr)
    {
        $this->__load();
        return parent::setIcvr($icvr);
    }

    public function getIcvr()
    {
        $this->__load();
        return parent::getIcvr();
    }

    public function setPaleography(\Kdde\EdbStoreBundle\Entity\Paleography $paleography)
    {
        $this->__load();
        return parent::setPaleography($paleography);
    }

    public function getPaleography()
    {
        $this->__load();
        return parent::getPaleography();
    }

    public function setFunzione(\Kdde\EdbStoreBundle\Entity\Funzione $funzione)
    {
        $this->__load();
        return parent::setFunzione($funzione);
    }

    public function getFunzione()
    {
        $this->__load();
        return parent::getFunzione();
    }

    public function setAmbitoOnomastico(\Kdde\EdbStoreBundle\Entity\Ambito $ambitoOnomastico)
    {
        $this->__load();
        return parent::setAmbitoOnomastico($ambitoOnomastico);
    }

    public function getAmbitoOnomastico()
    {
        $this->__load();
        return parent::getAmbitoOnomastico();
    }

    public function setMaterial(\Kdde\EdbStoreBundle\Entity\Material $material)
    {
        $this->__load();
        return parent::setMaterial($material);
    }

    public function getMaterial()
    {
        $this->__load();
        return parent::getMaterial();
    }

    public function addEpigraphLiterature(\Kdde\EdbStoreBundle\Entity\EpigraphLiterature $literatures)
    {
        $this->__load();
        return parent::addEpigraphLiterature($literatures);
    }

    public function getLiteratures()
    {
        $this->__load();
        return parent::getLiteratures();
    }

    public function setData(\Kdde\EdbStoreBundle\Entity\Data $data)
    {
        $this->__load();
        return parent::setData($data);
    }

    public function getData()
    {
        $this->__load();
        return parent::getData();
    }

    public function setPertinence(\Kdde\EdbStoreBundle\Entity\Pertinence $pertinence)
    {
        $this->__load();
        return parent::setPertinence($pertinence);
    }

    public function getPertinence()
    {
        $this->__load();
        return parent::getPertinence();
    }

    public function addConservation(\Kdde\EdbStoreBundle\Entity\Conservation $conservations)
    {
        $this->__load();
        return parent::addConservation($conservations);
    }

    public function getConservations()
    {
        $this->__load();
        return parent::getConservations();
    }

    public function addSigna(\Kdde\EdbStoreBundle\Entity\Signa $signas)
    {
        $this->__load();
        return parent::addSigna($signas);
    }

    public function getSignas()
    {
        $this->__load();
        return parent::getSignas();
    }

    public function getOldCompilator()
    {
        $this->__load();
        return parent::getOldCompilator();
    }

    public function setOldCompilator($oldCompilator)
    {
        $this->__load();
        return parent::setOldCompilator($oldCompilator);
    }

    public function setGeoPosition($geoPosition)
    {
        $this->__load();
        return parent::setGeoPosition($geoPosition);
    }

    public function getGeoPosition()
    {
        $this->__load();
        return parent::getGeoPosition();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'edb', 'id', 'icvr', 'lost', 'altMaxLetters', 'altMinLetters', 'paleography', 'reimpiego_opistografia', 'trascription', 'divergentText', 'criticalApparatus', 'metricText', 'greek', 'presenceLG', 'funzione', 'comment', 'dataScheda', 'ambitoOnomastico', 'adAnnum', 'principalProgNumber', 'subNumeration', 'material', 'literatures', 'data', 'isActive', 'pertinence', 'compilator', 'createdAt', 'conservations', 'signas', 'oldCompilator', 'geoPosition');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}